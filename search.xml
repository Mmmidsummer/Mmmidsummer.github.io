<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>No PEM start marker b-----BEGIN RSA PRIVATE KEY----- found</title>
    <url>/2023/05/30/No-PEM-start-marker-b-BEGIN-RSA-PRIVATE-KEY-found/</url>
    <content><![CDATA[<p>出现场景为使用python的<code>rsa</code>库读取openssl生成的公钥私钥进行加密和解密操作时。</p>
<span id="more"></span>

<p>RSA库用的是pkcs1格式的密钥文件，而如果之前生成的是pkcs8格式，会出现错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No PEM start marker &quot;b&#x27;-----BEGIN RSA PRIVATE KEY-----&#x27;&quot; found</span><br></pre></td></tr></table></figure>

<p>对于公钥读取，可以用<code>load_pkcs1_openssl_pem</code>方法代替<code>load_pkcs1</code>；对于私钥，只能用openssl命令把pkcs8格式转换为pkcs1了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkcs8 -in pri_key.pem -nocrypt -out private_pkcs1.pem -traditional</span><br></pre></td></tr></table></figure>

<p>似乎有的版本不需要<code>-traditional</code>。</p>
<p><img src="/2023/05/30/No-PEM-start-marker-b-BEGIN-RSA-PRIVATE-KEY-found/image-20230530172311009.png" alt="pkcs1.pem的开头为BEGIN RSA PRIVATE KEY"></p>
]]></content>
      <categories>
        <category>bug记录</category>
      </categories>
      <tags>
        <tag>bug记录</tag>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenSSL学习笔记</title>
    <url>/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>OpenSSL 是一个开源软件库，提供了一组用于处理安全通信的工具和库函数，它可以用于多种不同的用途。</p>
<span id="more"></span>

<h1 id="对称加密AES"><a href="#对称加密AES" class="headerlink" title="对称加密AES"></a>对称加密AES</h1><h2 id="AES-ECB"><a href="#AES-ECB" class="headerlink" title="AES ECB"></a>AES ECB</h2><p>ECB是不需要初始化向量，每个数据块单独进行加密，没有依赖关系，相同的明文块将始终加密为相同的密文块，无法隐藏明文块的模式。</p>
<p>随机生成256比特的密钥：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">openssl rand -out ecb.key <span class="number">32</span></span><br></pre></td></tr></table></figure>

<p>在vscode中可以用hexdump插件查看:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ee11f36abfa2835cea739da5b954e7d031ee90647c4c2c0ac9c760ccef623ba7</span><br></pre></td></tr></table></figure>

<p>加密：</p>
<p>1.txt的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test</span><br></pre></td></tr></table></figure>

<p>用256位密钥进行ecb模式的aes加密。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">openssl enc -e -aes-<span class="number">256</span>-ecb -<span class="keyword">in</span> <span class="number">1</span>.txt -out enc -pass file:ecb.key</span><br></pre></td></tr></table></figure>

<p>结果为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">53616c7465645f5f80e6464003d40b8142a8df7a239f9d0ee94a28c9a93118c9</span><br></pre></td></tr></table></figure>

<p>解密:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">openssl enc -d -aes-<span class="number">256</span>-ecb -<span class="keyword">in</span> enc -out <span class="number">2</span>.txt -pass file:ecb.key</span><br></pre></td></tr></table></figure>

<p>解密成功：</p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230525193555355.png" alt="2.txt"></p>
<h3 id="前缀Salted"><a href="#前缀Salted" class="headerlink" title="前缀Salted"></a>前缀Salted</h3><p>但是这样openssl加密的密文前缀都有”Salted”，因为enc加密默认是加盐值的。在密码学中，使用盐值（salt）进行加密是一种增强密码安全性的技术。盐值是一个随机生成的固定长度的字符串，它与密码结合使用，以产生密文。但这里不知道为什么前缀都是’Salted’，容易被识别出是加密以后的密文。</p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230525194800678.png" alt="openssl enc -help"></p>
<p>用<code>-nosalt</code>可以去掉这个前缀。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl enc -e -aes-256-ecb -nosalt  -in 2.txt -out enc4 -pass file:ecb.key</span><br></pre></td></tr></table></figure>

<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230525195423256.png" alt="enc4没有前缀"></p>
<h3 id="前缀出现的原因"><a href="#前缀出现的原因" class="headerlink" title="前缀出现的原因"></a>前缀出现的原因</h3><p>openssl默认加盐，但没有指定盐值，所以盐值都是随机生成的，所以会把盐也写到密文文件中。<code>-p</code>命令可以打印本次加密的向量和密钥值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-p                  Print the iv/key</span><br></pre></td></tr></table></figure>

<p>测试一下：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">openssl enc -e -aes-<span class="number">256</span>-ecb -<span class="keyword">in</span> <span class="number">1</span>.txt -out out2 -pass file:ecb.key -p</span><br></pre></td></tr></table></figure>

<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230527212426162.png" alt="控制台输出"></p>
<p>再打开out2文件可以发现，前缀<code>Salted__</code>后面紧跟的就是本次随机生成的盐值。</p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230527212553221.png" alt="out2"></p>
<h3 id="python验证加密结果"><a href="#python验证加密结果" class="headerlink" title="python验证加密结果"></a>python验证加密结果</h3><p>写一个简单的AES加密python脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pkcs7_padding</span>(<span class="params">data, block_size</span>):</span><br><span class="line">    padding_length = block_size - (<span class="built_in">len</span>(data) % block_size)</span><br><span class="line">    padding_value = <span class="built_in">chr</span>(padding_length).encode()</span><br><span class="line">    padded_data = data + padding_value * padding_length</span><br><span class="line">    <span class="keyword">return</span> padded_data</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data=<span class="string">&quot;test&quot;</span></span><br><span class="line">    raw_key=<span class="string">&quot;073F0AC5E53DB74FE534DD7141B9317F633C5DED35392713F4DA7809E73267F0&quot;</span></span><br><span class="line">    enc_key=<span class="built_in">bytes</span>.fromhex(raw_key)</span><br><span class="line">    aes_model=AES.new(enc_key,AES.MODE_ECB)</span><br><span class="line">    data=data.encode()</span><br><span class="line">    data=pkcs7_padding(data,<span class="number">16</span>)</span><br><span class="line">    enc_data=aes_model.encrypt(data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> enc_data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(i)[<span class="number">2</span>:],end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230527212839383.png" alt="python output"></p>
<p>和上图对比可知，加密结果和openssl一致。</p>
<h3 id="指定盐值"><a href="#指定盐值" class="headerlink" title="指定盐值"></a>指定盐值</h3><p>用<code>-S</code>来指定盐值。</p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230527213730519.png" alt="指定盐"></p>
<p>这样既保证了安全性，生成的文件中又仅有密文:</p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230527213835797.png" alt="out3"></p>
<h2 id="AES-CBC"><a href="#AES-CBC" class="headerlink" title="AES CBC"></a>AES CBC</h2><p>实际生产环境中一般用更安全的CBC模式。CBC（Cipher Block Chaining）模式使用前一个密文块与当前明文块进行异或运算，然后再加密，需要一个初始化向量（IV），用于第一个明文块的加密。CBC模式具有扩散效应，相同的明文块在不同的加密过程中会产生不同的密文块。此外，CBC模式支持并行加密解密操作。</p>
<p>前文是根据文件生成密钥的，如果不指定<code>file</code>，也可以根据控制台输入来生成密钥和向量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl enc -e -aes-256-cbc -in 1.txt -out cbc1 -p -pbkdf2</span><br></pre></td></tr></table></figure>

<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230527214916819.png" alt="CBC"></p>
<p><code>-pbkdf2</code>是选用更推荐的密钥生成函数。</p>
<p>解密:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">openssl enc -d -aes-<span class="number">256</span>-cbc -<span class="keyword">in</span> cbc1 -p -pbkdf2</span><br></pre></td></tr></table></figure>

<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230527215119251.png" alt="解密结果"></p>
<h1 id="非对称加密RSA"><a href="#非对称加密RSA" class="headerlink" title="非对称加密RSA"></a>非对称加密RSA</h1><p>RSA（Rivest-Shamir-Adleman）是一种非对称加密算法，广泛用于数据加密、数字签名和密钥交换等安全应用中。RSA 算法的基本原理是基于数论中的大数分解难题。它使用两个密钥，一个是公钥用于加密数据，另一个是私钥用于解密数据。公钥可以公开，而私钥必须保密。</p>
<p>以下是 RSA 算法的主要步骤：</p>
<ol>
<li><p>密钥生成：</p>
<ul>
<li>选择两个大素数 p 和 q，计算它们的乘积 n &#x3D; p * q。</li>
<li>计算欧拉函数值 φ(n) &#x3D; (p - 1) * (q - 1)。</li>
<li>选择一个小于 φ(n) 的整数 e，作为公钥指数。</li>
<li>计算与 e 互素的整数 d，作为私钥指数。即满足 (e * d) mod φ(n) &#x3D; 1。</li>
<li>公钥是 (e, n)，私钥是 (d, n)。</li>
</ul>
</li>
<li><p>加密：</p>
<ul>
<li>将明文消息转换为整数 m，使得 0 ≤ m &lt; n。</li>
<li>使用公钥 (e, n) 对 m 进行加密，得到密文 c &#x3D; m^e mod n。</li>
</ul>
</li>
<li><p>解密：</p>
<ul>
<li>使用私钥 (d, n) 对密文 c 进行解密，得到明文消息 m &#x3D; c^d mod n。</li>
</ul>
</li>
</ol>
<p>RSA 算法的安全性基于大整数分解的困难性。要破解 RSA，需要通过分解 n 来计算出 p 和 q，这在当前技术下对于足够大的素数 p 和 q 是非常困难的。</p>
<h2 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h2><p>生成私钥:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out pri_key.pem 1024</span><br></pre></td></tr></table></figure>

<p>1024是私钥长度。</p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230527230535279.png" alt="大概是base64编码存储的"></p>
<p>根据私钥生成公钥:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsa -in pri_key.pem -pubout -out pub_key.pem</span><br></pre></td></tr></table></figure>

<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230527230602376.png" alt="公钥文件"></p>
<h2 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h2><p>公钥加密：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkeyutl -encrypt -pubin -inkey pub_key.pem -in 1.txt -out rsa1</span><br></pre></td></tr></table></figure>

<p>私钥解密：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkeyutl -decrypt  -inkey pri_key.pem -in rsa1</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230527230836223.png" alt="结果"></p>
<h2 id="python验证"><a href="#python验证" class="headerlink" title="python验证"></a>python验证</h2><p>这里发生了小插曲，突然发现rsa加密每次结果都是不一样的，这是因为加密过程中使用了随机生成的填充数据。参考这篇文章：</p>
<blockquote>
<p><a href="https://blog.csdn.net/guyongqiangx/article/details/74930951">https://blog.csdn.net/guyongqiangx/article/details/74930951</a></p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">openssl rsautl -decrypt  -raw -inkey pri_key.pem -<span class="keyword">in</span> rsa1 -out out1</span><br></pre></td></tr></table></figure>

<p>可以看到中间填充的数据应该是随机的：</p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230530170509561.png" alt="-raw保留原始数据"></p>
<p>虽然每次生成的密文不一样，但只要私钥正确，都可以正常解密出来。</p>
<h3 id="python-rsa库"><a href="#python-rsa库" class="headerlink" title="python rsa库"></a>python rsa库</h3><p>rsa库的常用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line">plaintext = <span class="string">&quot;test&quot;</span>  <span class="comment"># 明文</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pub_key.pem&quot;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> x:</span><br><span class="line">    public_key = rsa.PublicKey.load_pkcs1_openssl_pem(x.read())</span><br><span class="line">    cipher_text = rsa.encrypt(plaintext.encode(), public_key)     <span class="comment"># 使用公钥加密</span></span><br><span class="line">    <span class="built_in">print</span>(cipher_text)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;private_pkcs1.pem&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> x:</span><br><span class="line">    private_key = rsa.PrivateKey.load_pkcs1(x.read())</span><br><span class="line">    text = rsa.decrypt(cipher_text, private_key)   <span class="comment"># 使用私钥解密</span></span><br><span class="line">    <span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure>

<p>此处出现了一些问题，RSA库用的是pkcs1格式的密钥文件，而本文之前生成的是pkcs8格式，会出现错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No PEM start marker &quot;b&#x27;-----BEGIN RSA PRIVATE KEY-----&#x27;&quot; found</span><br></pre></td></tr></table></figure>

<p>对于公钥读取，可以用<code>load_pkcs1_openssl_pem</code>方法代替<code>load_pkcs1</code>；对于私钥，只能用openssl命令把pkcs8格式转换为pkcs1了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkcs8 -in pri_key.pem -nocrypt -out private_pkcs1.pem -traditional</span><br></pre></td></tr></table></figure>

<p>似乎有的版本不需要<code>-traditional</code>。</p>
<img src="image-20230530172311009.png" alt="pkcs1.pem的开头为BEGIN RSA PRIVATE KEY" style="zoom:50%;" />

<p>解密openssl生成的密文：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out=rsa.decrypt(<span class="built_in">bytes</span>.fromhex(<span class="string">&quot;94c21061a08cdf3043c089e5d7b8229e139a60a095ea64b02d1d43d90c1773b4ebb491802b13cfa53f88c9c3e27ed4ab30fc3238fb983ae792f8425aebd077d34661f93ada40a5a768bb608bed43d152004ddb5390e7cac322af3d39685a70757f962dcaeeace23510e60086c7451e22d466e098dc33fa943bac52083a332f32&quot;</span>),private_key)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br></pre></td></tr></table></figure>

<h3 id="python-Crypto"><a href="#python-Crypto" class="headerlink" title="python Crypto"></a>python Crypto</h3><p>常用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pri_key.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    private_key = RSA.import_key(f.read())</span><br><span class="line">cipher_rsa = PKCS1_v1_5.new(private_key.publickey())  <span class="comment"># 创建 RSA 加密对象</span></span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">&quot;test&quot;</span>  <span class="comment"># 明文</span></span><br><span class="line">ciphertext=cipher_rsa.encrypt(plaintext.encode())</span><br><span class="line">cipher = PKCS1_v1_5.new(private_key)        <span class="comment"># 生成一个解密的类</span></span><br><span class="line">back_text = cipher.decrypt(ciphertext, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(back_text)</span><br></pre></td></tr></table></figure>

<p>解密openssl生成的密文：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(cipher.decrypt(<span class="built_in">bytes</span>.fromhex(<span class="string">&quot;94c21061a08cdf3043c089e5d7b8229e139a60a095ea64b02d1d43d90c1773b4ebb491802b13cfa53f88c9c3e27ed4ab30fc3238fb983ae792f8425aebd077d34661f93ada40a5a768bb608bed43d152004ddb5390e7cac322af3d39685a70757f962dcaeeace23510e60086c7451e22d466e098dc33fa943bac52083a332f32&quot;</span>),<span class="number">0</span>))</span><br></pre></td></tr></table></figure>



<h1 id="apache配置https"><a href="#apache配置https" class="headerlink" title="apache配置https"></a>apache配置https</h1><p>本文的apache环境是之前基于wamp配置的，理论上配置https比原生apache服务器难。参考</p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_46680028/article/details/109133461">https://blog.csdn.net/qq_46680028/article/details/109133461</a></p>
</blockquote>
<h2 id="openssl部分"><a href="#openssl部分" class="headerlink" title="openssl部分"></a>openssl部分</h2><p>创建证书请求文件：</p>
<p>CSR 文件是一个包含有关证书请求者（例如服务器或个人）信息的文件，需要经过 CA 的验证和签名，以生成最终的数字证书（CRT 文件）。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">openssl req -new -key pri_key.pem -out server.csr</span><br></pre></td></tr></table></figure>

<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230528214601599.png" alt="创建证书,域名我写的是localhost"></p>
<p>签发证书：</p>
<p>CRT 文件是证书颁发机构对证书请求者进行验证后生成的，用于证明证书请求者的身份和提供公钥给通信对方。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -days 365 -sha256 -in server.csr -signkey pri_key.pem -out servernew.crt</span><br></pre></td></tr></table></figure>

<h2 id="apache部分"><a href="#apache部分" class="headerlink" title="apache部分"></a>apache部分</h2><p>把<code>servernew.crt</code>和<code>pri_key.pem</code>文件移到apache的<code>conf</code>目录下。</p>
<p>apache调用ssl模块：</p>
<p>在httpd.conf文件中开启如下选项：</p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230528215500434.png" alt="169"></p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230528215557941.png" alt="567"></p>
<p>修改<code>conf/extra/httpd-ssl.comf</code>文件：</p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230528215849754.png" alt="84"></p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230528215922876.png" alt="73 74注释掉"></p>
<p>把<code>C:\Windows\System32\drivers\etc\hosts</code>中添加(一般已经添加过了):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br></pre></td></tr></table></figure>

<p>访问<code>https://localhost</code></p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230528220217187.png" alt="localhost"></p>
<p>点<code>高级</code>:</p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230528220549777.png" alt="自签名"></p>
<p>使用 OpenSSL 生成证书时，默认情况下生成的证书是自签名的（self-signed）。自签名证书意味着该证书的颁发者和主题是相同的，没有经过第三方可信的证书颁发机构（CA）进行验证和签名。大多数浏览器和操作系统会发出类似的警告信息，提示证书不被信任。这是因为浏览器和操作系统内置了一组受信任的根证书颁发机构列表，用于验证和信任通过这些机构签名的证书。自签名证书不在这个受信任列表中，因此会被视为不可信。</p>
<p>接收风险并继续即可。</p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230528221202725.png" alt="访问成功"></p>
<p>为了每次新访问都出现警告，可以导入自签名证书到受信任的根证书列表，点击CRT证书:</p>
<img src="image-20230528221417844.png" alt="安装" style="zoom:50%;" />

<img src="image-20230528221439594.png" alt="选择本地计算机" style="zoom:50%;" />

<img src="image-20230528221516669.png" alt="受信任的根证书颁发机构" style="zoom:50%;" />

<p>用别的浏览器访问，没有危险警告了。</p>
<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230528221740210.png" alt="image-20230528221740210"></p>
<p>可以通过<code>windows+R</code>，运行<code>certmgr.msc</code>进行证书管理。</p>
<h1 id="https流量分析"><a href="#https流量分析" class="headerlink" title="https流量分析"></a>https流量分析</h1><p>基于前文配置好的https，用wires hark进行抓包进行数据分析。</p>
<h2 id="证书密钥分析"><a href="#证书密钥分析" class="headerlink" title="证书密钥分析"></a>证书密钥分析</h2><h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><p>查看证书信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -in servernew.crt -text -noout</span><br></pre></td></tr></table></figure>

<p><img src="/2023/05/25/OpenSSL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20230529225347669.png" alt="证书信息"></p>
<p>回顾前文对RSA算法的简介，公钥是(e,n),分别是<code>Exponent</code>和<code>Modulus</code>。</p>
<p>查看私钥信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsa -in pri_key.pem -text -noout</span><br></pre></td></tr></table></figure>

<img src="image-20230529230606851.png" alt="私钥信息" style="zoom:50%;" />

<p>由前文知私钥是(d,n)。私钥中的信息参考这篇博客：</p>
<blockquote>
<p><a href="https://blog.csdn.net/KAlbertLee/article/details/71106528">https://blog.csdn.net/KAlbertLee/article/details/71106528</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>私钥信息</th>
<th>解析</th>
</tr>
</thead>
<tbody><tr>
<td>privateExponent</td>
<td>私钥的d</td>
</tr>
<tr>
<td>prime1</td>
<td>n的素数因子p</td>
</tr>
<tr>
<td>prime2</td>
<td>n的素数因子q</td>
</tr>
<tr>
<td>exponent1</td>
<td>d mod(p-1)</td>
</tr>
<tr>
<td>exponent2</td>
<td>d mod(q-1)</td>
</tr>
<tr>
<td>coefficient</td>
<td>CRT系数q-1 mod p</td>
</tr>
</tbody></table>
<p><code>exponent1</code>、<code>exponent2</code> 和 <code>coefficient</code> 是与 CRT（中国剩余定理）相关的参数，用于提高解密操作的效率。具体可以看这篇博客，讲的比较清楚。</p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_43589852/article/details/127691919">https://blog.csdn.net/qq_43589852/article/details/127691919</a></p>
<p><a href="https://www.di-mgt.com.au/crt_rsa.html">https://www.di-mgt.com.au/crt_rsa.html</a></p>
</blockquote>
<p>查看公钥信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsa -pubin -in pub_key.pem -text -noout</span><br></pre></td></tr></table></figure>

<p>已经包含在证书信息里了，不再赘述。</p>
<h3 id="脚本验证"><a href="#脚本验证" class="headerlink" title="脚本验证"></a>脚本验证</h3><p>可以用python脚本验证信息是否正确。</p>
<p>验证<code>prime1</code>和<code>prime2</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">modulus=<span class="string">&quot;00:c7:a7:0d:02:7a:d0:67:28:90:71:ef:4a:a3:b3:\</span></span><br><span class="line"><span class="string">    4d:f4:62:36:d5:ee:54:81:83:04:95:3b:fd:72:7d:\</span></span><br><span class="line"><span class="string">    38:30:ad:a9:d4:43:9b:02:55:52:71:e1:22:fc:8c:\</span></span><br><span class="line"><span class="string">    22:11:92:b2:d6:31:28:0e:3a:01:34:02:30:e0:76:\</span></span><br><span class="line"><span class="string">    c9:e5:58:ea:47:97:0a:3e:09:03:c9:65:83:e6:35:\</span></span><br><span class="line"><span class="string">    50:5b:99:94:a5:98:63:06:77:28:7d:79:a1:77:e5:\</span></span><br><span class="line"><span class="string">    a7:42:86:fa:18:a9:e8:05:00:bf:33:e5:cd:6f:d1:\</span></span><br><span class="line"><span class="string">    16:d4:31:29:3e:6d:b9:fc:74:f0:ca:fd:fb:c7:7e:\</span></span><br><span class="line"><span class="string">    1d:89:13:d1:b9:8a:f3:7d:1f&quot;</span></span><br><span class="line">prime1=<span class="string">&quot;00:f3:e8:76:3f:99:a6:3a:62:c3:4a:b1:17:ec:97:\</span></span><br><span class="line"><span class="string">    53:6e:a4:fc:70:4e:fb:29:6b:57:99:c3:31:15:bf:\</span></span><br><span class="line"><span class="string">    55:3e:8f:40:92:96:60:99:d7:50:5d:16:c4:ea:36:\</span></span><br><span class="line"><span class="string">    60:e9:3b:16:55:de:2f:11:52:4f:fc:e8:94:2b:71:\</span></span><br><span class="line"><span class="string">    08:86:fd:bc:c9&quot;</span></span><br><span class="line">prime2=<span class="string">&quot;00:d1:8c:ec:83:d0:79:62:13:80:c5:86:10:e9:ca:\</span></span><br><span class="line"><span class="string">    85:2d:e7:cf:71:ca:8b:a2:49:74:3f:aa:4b:55:0a:\</span></span><br><span class="line"><span class="string">    50:90:4b:82:fc:21:ad:2a:63:e5:59:1d:ef:f7:2e:\</span></span><br><span class="line"><span class="string">    64:38:b8:58:44:75:ce:4a:2b:2c:fe:fe:3b:d3:63:\</span></span><br><span class="line"><span class="string">    bf:33:6b:a6:a7&quot;</span></span><br><span class="line">modulus=modulus.replace(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">prime1=prime1.replace(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">prime2=prime2.replace(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">modulus_int=<span class="built_in">int</span>(modulus,<span class="number">16</span>)</span><br><span class="line">prime1_int=<span class="built_in">int</span>(prime1,<span class="number">16</span>)</span><br><span class="line">prime2_int=<span class="built_in">int</span>(prime2,<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>( (prime1_int*prime2_int) == modulus_int)</span><br></pre></td></tr></table></figure>

<p>结果为True。</p>
<p>验证 (e * d) mod φ(n) &#x3D; 1是否成立。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">privateExponent=<span class="string">&quot;\</span></span><br><span class="line"><span class="string">    00:ad:ec:2d:5e:22:a4:d7:a8:b3:a4:3d:23:95:55:\</span></span><br><span class="line"><span class="string">    86:ac:44:be:a6:40:77:27:57:7e:2f:8e:d1:eb:e1:\</span></span><br><span class="line"><span class="string">    7f:88:90:50:68:93:f8:3d:e1:1b:f0:0e:83:0e:e3:\</span></span><br><span class="line"><span class="string">    f8:6d:bc:90:c4:1c:90:5b:4c:56:6d:fb:16:9f:03:\</span></span><br><span class="line"><span class="string">    7c:3f:a9:e4:73:ab:ee:73:d1:be:d9:f4:46:47:20:\</span></span><br><span class="line"><span class="string">    f0:41:93:5f:f6:c7:cf:c8:ba:bf:0d:4f:57:e4:4c:\</span></span><br><span class="line"><span class="string">    c6:2b:79:b5:0e:e9:1a:34:0f:e4:80:68:30:5d:23:\</span></span><br><span class="line"><span class="string">    bc:26:30:b3:e4:42:89:96:5b:81:cb:75:29:75:38:\</span></span><br><span class="line"><span class="string">    d7:f9:05:7a:90:20:ed:9d:11&quot;</span></span><br><span class="line">privateExponent=privateExponent.replace(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">d=<span class="built_in">int</span>(privateExponent,<span class="number">16</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">euler_var=(prime1_int-<span class="number">1</span>)*(prime2_int-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>( ( ( d*e )%euler_var ) == <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>结果为True。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>OpenSSL</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring初体验</title>
    <url>/2023/05/23/Spring%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="Spring-初体验："><a href="#Spring-初体验：" class="headerlink" title="Spring 初体验："></a>Spring 初体验：</h1><p>俗话说“没学过spring等于没学过Java”，spring在Java领域的地位可见一斑。在Java中，Spring是一个开源的应用程序框架，用于构建企业级Java应用程序。它提供了一个轻量级的、非侵入性的编程和配置模型，用于开发灵活、可扩展的应用程序。笔者Java水平很低，但由于课程的原因写了好久的Java代码，顺便学习一下spring吧。</p>
<span id="more"></span>

<h2 id="spring-boot项目创建"><a href="#spring-boot项目创建" class="headerlink" title="spring boot项目创建"></a>spring boot项目创建</h2><p>个人认为，学习Java最好的工具就是IDEA，颜值高功能齐全，除了配置要求高容易卡没缺点，当然eclipse也有轻量级的优势吧。IDEA的专业版可以用学生认证免费获得。</p>
<p>直接用IDEA的spring initializr来创建一个新的spring项目。</p>
<img src="image-20230523171001294.png" alt="创建项目" style="zoom:50%;" />

<p>初学者的话，只选一个spring web也不是不行啦。这里的spring boot最新版本最老只支持JDK 17，后续编译运行会有</p>
<blockquote>
<p>错误: 无效的源发行版：17</p>
</blockquote>
<p>因此如果java版本老的可以选老的spring boot版本。解析maven依赖的时间还挺久的，如果实在太慢可以参考网络上的教程。右键pom.xml，选择maven，新建settings.xml，然后添加镜像。</p>
<img src="image-20230523171319899.png" alt="依赖添加" style="zoom:50%;" />

<p>创建以后，自带一个有主函数的java文件：</p>
<p><img src="/2023/05/23/Spring%E5%88%9D%E4%BD%93%E9%AA%8C/image-20230523181330424.png" alt="主函数"></p>
<h2 id="hello-world！"><a href="#hello-world！" class="headerlink" title="hello world！"></a>hello world！</h2><p>私以为，学习web框架中运行一个简单的web服务器等价于学习编程语言输出hello world。创建一个控制器类，用于处理HTTP请求并返回响应。你可以使用<code>@Controller</code>或<code>@RestController</code>注解进行标记，并定义相应的请求处理方法。</p>
<p><img src="/2023/05/23/Spring%E5%88%9D%E4%BD%93%E9%AA%8C/image-20230523181708596.png" alt="HelloWorld.java"></p>
<p>运行main方法，默认端口为8080，访问<code>http://localhost:8080/hello</code>，可以看到返回的“你好世界”。</p>
<p><img src="/2023/05/23/Spring%E5%88%9D%E4%BD%93%E9%AA%8C/image-20230523181225900.png" alt="浏览器访问结果"></p>
<h2 id="访问html静态页面"><a href="#访问html静态页面" class="headerlink" title="访问html静态页面"></a>访问html静态页面</h2><p>正常的web服务器一般不会返回单个字符串，而是返回一个html页面。要让spring boot服务器能输出html页面，首先要将我们的html文件放到<code>src\main\resources</code>文件夹中。</p>
<p><img src="/2023/05/23/Spring%E5%88%9D%E4%BD%93%E9%AA%8C/image-20230523211003841.png" alt="resources"></p>
<p>staic文件夹存放静态资源，资源文件会直接暴露给外部访问，不经过模板引擎的处理。templates文件夹存放模板文件，通过模板引擎进行解析和渲染，最终生成HTML响应。模板文件通常包含动态内容、模板语法和模板表达式，可以与后端数据进行交互。</p>
<p>启动服务器，通过url:<code>localhost:8080/index.html</code>来访问static文件夹中的<code>index.html</code>文件。</p>
<p><img src="/2023/05/23/Spring%E5%88%9D%E4%BD%93%E9%AA%8C/image-20230523211939593.png" alt="index.html"></p>
<p>要正常访问templates文件夹，需要添加thymeleaf依赖。在pom.xml中添加以下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf依赖 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新添加一个控制器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/home&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">home</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，通过<code>localhost:8080/home</code>也可以访问index2.html文件了。</p>
<p><img src="/2023/05/23/Spring%E5%88%9D%E4%BD%93%E9%AA%8C/image-20230523212615267.png" alt="index2"></p>
<p>注意到上文的代码中，出现了两种控制器类，即<code>@RestController</code>和<code>@Controller</code>,<code>@Controller</code>注解表示该类是一个控制器（Controller），用于处理HTTP请求并生成相应的响应。它可以返回HTML视图、JSON数据等多种形式的响应。<code>@RestController</code>注解是<code>@Controller</code>注解的特殊形式，它结合了<code>@Controller</code>和<code>@ResponseBody</code>注解的功能。<code>@RestController</code>注解用于创建RESTful风格的控制器，专门用于返回JSON或XML格式的响应数据。如果要用<code>@Controller</code>返回字符串数据，必须还要添加<code>@ResponseBody</code>。</p>
<h2 id="动态生成HTML内容"><a href="#动态生成HTML内容" class="headerlink" title="动态生成HTML内容"></a>动态生成HTML内容</h2><p>spring boot可以通过模板动态渲染html页面，和django有点类似。</p>
<p>修改index2.html的内容:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;data&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制器类中添加新方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/dynamic&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">DynamicPage</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">       model.addAttribute(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;qwq&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;index2&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>运行项目，访问<code>localhost:8080/dynamic</code>：</p>
<p><img src="/2023/05/23/Spring%E5%88%9D%E4%BD%93%E9%AA%8C/image-20230523214927845.png" alt="dynamic"></p>
<p>Thymeleaf还有很多功能强大的语法，在此不再赘述。</p>
<h2 id="解析get请求参数"><a href="#解析get请求参数" class="headerlink" title="解析get请求参数"></a>解析get请求参数</h2><p>在Spring Boot中，可以使用@RequestParam注解或HttpServletRequest对象来解析URL中的参数，并返回特定参数的值。</p>
<p>在控制器类添加方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/param1&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">ParamParse1</span><span class="params">(<span class="meta">@RequestParam(&quot;a&quot;)</span> String param)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> param;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/param2&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">ParamParse2</span><span class="params">(HttpServletRequest r)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> r.getParameter(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>运行项目。</p>
<p><img src="/2023/05/23/Spring%E5%88%9D%E4%BD%93%E9%AA%8C/image-20230523220805331-16848508867291.png" alt="param1"></p>
<p><img src="/2023/05/23/Spring%E5%88%9D%E4%BD%93%E9%AA%8C/image-20230523220719695.png" alt="param2"></p>
<h2 id="处理post请求"><a href="#处理post请求" class="headerlink" title="处理post请求"></a>处理post请求</h2><p>在Spring Boot中，可以使用@RequestParam注解或@RequestBody注解来获取POST方法的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/post1&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">Post1</span><span class="params">(<span class="meta">@RequestParam(&quot;data&quot;)</span> String data)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> data;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@PostMapping(&quot;/post2&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">Post2</span><span class="params">(<span class="meta">@RequestBody</span> String data)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> data;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>运行项目，用curl发送post请求。</p>
<p><img src="/2023/05/23/Spring%E5%88%9D%E4%BD%93%E9%AA%8C/image-20230523223207019.png" alt="post1"></p>
<p><img src="/2023/05/23/Spring%E5%88%9D%E4%BD%93%E9%AA%8C/image-20230523223230744.png" alt="post2"></p>
<h2 id="访问MySQL数据库"><a href="#访问MySQL数据库" class="headerlink" title="访问MySQL数据库"></a>访问MySQL数据库</h2><p>访问数据库也是web服务器的基本功能之一。</p>
<p>首先在<code>pom.xml</code>中添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>application.properties</code>中添加以下内容，username、password等根据实际情况修改。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/dbname</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">username</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">password</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p>新建<code>DataBaseConfig.java</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataBaseConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DriverManagerDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverManagerDataSource</span>();</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在需要访问数据库的组件或服务中，注入<code>JdbcTemplate</code>并使用其方法执行数据库操作。创建<code>MyService.java</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyService</span><span class="params">(JdbcTemplate jdbcTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForList(query);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再在控制器类中添加如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MyService myService;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyController</span><span class="params">(MyService myService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myService = myService;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/db&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getDatabaseData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> myService.getAllData();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>启动项目，访问<code>localhost:8080/db</code>:</p>
<p><img src="/2023/05/23/Spring%E5%88%9D%E4%BD%93%E9%AA%8C/image-20230523230308540.png" alt="数据库查询结果"></p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>以上内容足够用spring boot搭建一个有正常功能的web服务器，路漫漫其修远兮，之后还要对spring进行更深入的学习。有时间再更新吧。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>新手</tag>
      </tags>
  </entry>
</search>
